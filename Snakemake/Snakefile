import pandas as pd 
import os



from glob import glob
from io import StringIO

import pysam

sarscov2_genelist_initial = "assets/2697049_genelist.csv"


genelist_df = pd.read_csv(sarscov2_genelist_initial).set_index("gene", drop=False)


if "genes" in config:
	gene_list = config["genes"].split(",")
else:
	gene_list = genelist_df.gene.values


genelist_df = genelist_df[genelist_df.gene.isin(gene_list)]

genelist_df.to_csv("assets/2697049_genelist_filtered.csv",index=False)

print(genelist_df)

sarscov2_genelist = "assets/2697049_genelist_filtered.csv"




def cliquesnv_coords(genelist, genename, sample):
	
	gene = genelist.loc[genename,]

	start, end = gene.start, gene.end

	bam = "output/haplotype/{sample}/{gene}.bam".format(gene=genename, sample=sample)
	
	command_str = " -sp {start} -ep {end} -os {start} -oe {end} ".format(start=start-1, end=end)
	
	return command_str

def get_genes_agg(sample_list, gene_list=genelist_df):
	out_files = []

	for sample in sample_list:
		wildcards = snakemake.io.Wildcards()
		wildcards.sample = sample
		genes = get_genes(dict(sample=sample))

		out_files.extend(expand("output/haplotype/{sample}/{genes}.fasta", sample=sample, gene=genes))


	return out_files

def get_genes(wildcards, gene_list=genelist_df, samples=None):

	checkpoints.getgenebamstats.get(**wildcards).output
	print("Checkpoint wildcard type",type(wildcards))
	haplotype_info = pd.read_csv("output/haplotype/{sample}/{sample}_haplotype_info.txt".format(sample=wildcards["sample"]))
	#haplotype_info[haplotype_info["pass"] == True]
	haplotype_info = haplotype_info[(haplotype_info.reads > 50) & (haplotype_info.gene.isin(gene_list.gene))]
	
	gene = haplotype_info.gene.values
        return gene	

def get_input(inputdir):
	
	bam_files = glob("%s/*.bam"%inputdir)
	basenames = list(map(os.path.basename, bam_files))
	
	bam_files_ref = pd.Series(bam_files, index=basenames)
	delim_df = pd.DataFrame.from_records([(basename, basename.count("_"),) for basename in basenames], columns=["basename","delim_count"])
		
	out_df_list = []
	
	for c, df in delim_df.groupby("delim_count"):
		if c == 0:
			out_df_list.append(pd.DataFrame(dict(samplename=df.basename.apply(lambda x:x.replace(".bam","")).values,
							     fielname=bam_files_ref[df.basename.values].values)))
			continue

		for i in range(c):
			s = pd.Series(map(lambda x:"_".join(x.split("_")[:(i+1)]), df.basename))
			if len(s.drop_duplicates()) == len(s):
				out_df_list.append(pd.DataFrame(dict(samplename=s.values, filename=bam_files_ref[df.basename.values].values)))
				break

			



	return pd.concat(out_df_list).set_index("samplename",drop=False)





sample_df = get_input(config["inputdir"])

sample_df.to_csv("./sampledf.csv")


rule all:
	input:
		agg_csv="output/mutation_table_aggregate.csv",
		#mut_agg=expand("output/mutation_tables_agg/{sample}_mutation_table_aggregate.csv", sample=sample_df.samplename),
		#haplotypes=get_genes_agg(sample_df.samplename)
	

"""
rule bamindex:
	input:
		bam=lambda wildcards: sample_df.loc[wildcards.sample].filename
	output:
		bai="%s/{sample}.bam.bai"%(config["inputdir"])
	shell:
		"samtools index {input.bam}"
"""

rule genpseudoref:
	input:
		bam=lambda wildcards: sample_df.loc[wildcards.sample,].filename
	
	params:
		ref_fasta="assets/NC_045512.3.fasta"
	output:
		"output/tmp/{sample}.pseudoref.fasta"
	shell:
		"python scripts/pseudoref.py -i {params.ref_fasta} -b {input.bam} -o {output}"
	



checkpoint getgenebamstats:
	input:
		bam=lambda wildcards: sample_df.loc[wildcards.sample,].filename,
		bai=lambda wildcards: "{bam}.bai".format(bam=sample_df.loc[wildcards.sample,].filename),
		pseudo_ref=rules.genpseudoref.output
	output:
		haplotype_info="output/haplotype/{sample}/{sample}_haplotype_info.txt"
	params:
		genelist=sarscov2_genelist_initial,
		output_dir="output/haplotype/{sample}/"
	shell:
		"python3 scripts/cliquesnvhaplo.py -p {wildcards.sample} -r {input.pseudo_ref} -b {input.bam} "
		"-g {params.genelist} -o {params.output_dir} -s "
		



rule getgenebam:
	input:
		bam=lambda wildcards: sample_df.loc[wildcards.sample,].filename,
		bai=lambda wildcards: "{bam}.bai".format(bam=sample_df.loc[wildcards.sample,].filename),
		halpo_info=rules.getgenebamstats.output.haplotype_info,
		pseudo_ref=rules.genpseudoref.output

	output:
		#expand("output/haplotype/{{sample}}/{gene}.bam",gene=genelist_df.gene)
		temporary("output/bam/original/{sample}/{gene}.bam")
	params:
		genelist=sarscov2_genelist,
		output_dir="output/bam/original/{sample}",
		gene=lambda wildcards: wildcards.gene
	shell:
		"python3 scripts/cliquesnvhaplo.py -p {wildcards.sample} -r {input.pseudo_ref} -b {input.bam} "
		"-g {params.genelist} -o {params.output_dir}  -n -G {params.gene}"


rule dedupbam:
	input:
		#bam="output/haplotype/{sample}/{gene}.bam"
		bam=rules.getgenebam.output
		
	output:
		BAM=temporary("output/bam/dedup/{sample}_{gene}.dedup.bam"),
		M="output/dedup.metrics/{sample}.{gene}.txt"

	shell:
		"picard MarkDuplicates I={input.bam} O={output.BAM} M={output.M} 2> /dev/zero > /dev/zero"
	

rule lofreqviterbi:
	input:
		bam=rules.dedupbam.output.BAM,
		pseudoref=rules.genpseudoref.output
	output:
		bam=temporary("output/bam/viterbi/{sample}_{gene}.viterbi.bam")
	shell:
		"lofreq viterbi -f {input.pseudoref} {input.bam} | samtools sort -o {output} && "
		"samtools index {output}"  





rule subsample_genebam:
        input:
                bam=rules.lofreqviterbi.output.bam
        output:
                bam=temporary("output/haplotype/{sample}/{gene}.downsample.bam")

        params: 
                max_depth=3000

        shell: 
                "java -Xmx2G -XX:ParallelGCThreads=1 -jar tools/sortsamrefname.jar {input.bam} 2> /dev/zero | "
		"java -Xmx2G -XX:ParallelGCThreads=1 -jar tools/biostar154220.jar -n {params.max_depth} 2> /dev/zero | "
		"samtools sort - > {output.bam} && samtools index {output.bam}"



rule cliquesnv:
	input:
		gene_bam=rules.subsample_genebam.output.bam,
	output:
		cliquesnv="output/haplotype/{sample}/{gene}.downsample.fasta"
	params:
		clique_coord = lambda wildcards: cliquesnv_coords(genelist_df, wildcards.gene, wildcards.sample),
		outdir = lambda wildcards: "output/haplotype/{sample}/".format(sample=wildcards.sample),
	threads: 4
	resources: 
		mem=10
	shell:
		"java -Xmx8G -jar tools/clique-snv.jar {params.clique_coord} -t 10 -tf 0.01 -m snv-illumina -in {input.gene_bam} -outDir {params.outdir} -threads {threads} > /dev/zero"

rule cliquesnvparse:
	input:
		rules.cliquesnv.output
	output:
		cliquesnv="output/haplotype/{sample}/{gene}.fasta"
	shell:
		"python3 scripts/parsecliquesnv.py -m 12 -i {input} -n {wildcards.sample} -o {output.cliquesnv}"



rule cliquesnv_agg:
	input:
		lambda wildcards: expand("output/haplotype/{{sample}}/{gene}.fasta", sample=wildcards.sample, gene=get_genes(wildcards))
	output:
		"output/{sample}_cliquesnvagg.txt"
	shell:
		"touch {output}"

rule virulign:
	input:
		"output/haplotype/{sample}/{gene}.fasta"

	output:
		nt_alignment="output/virulign/{gene}/{sample}_{gene}_nt.fasta",
		aa_alignment="output/virulign/{gene}/{sample}_{gene}_aa.fasta",
		csv="output/virulign/{gene}/{sample}.csv"
	
	params: 
		ref = lambda wildcards: "assets/virulign/{}.xml".format(wildcards.gene)
	threads: 1
	resources: 
		mem=10
	shell:
		"OMP_NUM_THREADS={threads} python3 scripts/virulign.py -i {input} -n {output.nt_alignment} "
		"-a {output.aa_alignment} -c {output.csv} -r {params.ref} -A"

rule virulign_process:
	input:
		rules.virulign.output.csv
	output:
		mut_table="output/mutation_tables/{sample}_{gene}.csv",
		agg_table="output/agg_aatables/{sample}_{gene}.csv",
		normal_table="output/aatables/{sample}_{gene}.csv"
	shell:
		"python3 scripts/virulignparse.py -i {input} -m {output.mut_table} -a {output.agg_table} -n {output.normal_table}"


rule virulign_agg:
	input:
		samp=lambda wildcards: expand("output/virulign/{gene}/{sample}.csv", sample=wildcards.sample, gene=get_genes(wildcards)),
		genes=lambda wildcards: expand("output/mutation_tables/{sample}_{gene}.csv", sample=wildcards.sample, gene=get_genes(wildcards)) 
	
	output:
		virulign=temporary("output/{sample}_virulign.txt"),
		agg_csv="output/mutation_tables_agg/{sample}_mutation_table_aggregate.csv"

	params:
		agg_csv="output/{sample}_mutation_table_aggregate.csv"
		

	run:
		shell("touch {output.virulign}")
		print("Input:",input.keys())
		if "genes" in input.keys():
			print("genes in output")
			shell("touch {output.virulign}")
				
			shell("python3 scripts/aggregate.py -c {input.genes} -o {output.agg_csv}")
		else:
			print("genes NOT in output")
			shell("touch {output.agg_csv}")


rule muttable_agg:
	input:
		expand("output/mutation_tables_agg/{sample}_mutation_table_aggregate.csv", sample=sample_df.samplename)
	output:
		"output/mutation_table_aggregate.csv"
	shell:
		"python scripts/aggregate.py -c {input} -o {output}"



