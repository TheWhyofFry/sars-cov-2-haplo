import pandas as pd 
import os



from glob import glob
from io import StringIO

import pysam

sarscov2_genelist = "assets/2697049_genelist.csv"


genelist_df = pd.read_csv(sarscov2_genelist).set_index("gene", drop=False)

def cliquesnv_coords(genelist, genename, sample):
	
	gene = genelist.loc[genename,]

	start, end = gene.start, gene.end

	# Dumb thing with cliquesnv if the specified boundaries have 0 depth
	# So we check the minimum/max positions that have coverage and adjust 
	# the start/stop positions accordingly

	bam = "output/haplotype/{sample}/{gene}.bam".format(gene=genename, sample=sample)
	with StringIO(pysam.depth(bam)) as sio:
		depth_df = pd.read_table(sio, header=None, names=["ref","pos","depth"], sep="\t")
		depth_df = depth_df[depth_df.depth > 1]

	
	start = max([start, depth_df.pos.min()])
	end   = min([end, depth_df.pos.max()])
	


	command_str = " -sp {start} -ep {end} -os {start} -oe {end} ".format(start=start-1, end=end-1)


		

	return command_str

def get_genes(wildcards):
	checkpoints.getgenebam.get(**wildcards).output

	haplotype_info = pd.read_csv("output/haplotype/{sample}/{sample}_haplotype_info.txt".format(sample=wildcards.sample))
	#haplotype_info[haplotype_info["pass"] == True]
	haplotype_info = haplotype_info[haplotype_info.reads > 50]

	gene = glob_wildcards(os.path.join("output/haplotype",wildcards.sample,"{gene}.bam")).gene
	gene = [g for g in gene if (not "downsample" in g)]
	gene = list(set(gene).intersection(haplotype_info.gene.values))
	return gene
	

def get_input(inputdir):
	
	bam_files = glob("%s/*.bam"%inputdir)
	basenames = list(map(os.path.basename, bam_files))
	print(basenames)
	try:
		max_delim = max(map(lambda x:x.count("_"), basenames))
	except ValueError:
		max_delim = 0

	if max_delim == 0:
		s = pd.Series([n.replace(".bam","") for n in basenames])
	for i in range(max_delim):
		s = pd.Series(map(lambda x:x.split("_")[i], basenames))
		l = len(s)
			
		if len(s.drop_duplicates()) == l:
			break

	return pd.DataFrame(dict(samplename=s.values, filename=bam_files)).set_index("samplename",drop=False)



sample_df = get_input(config["inputdir"])




rule all:
	input:
		#haploinfo=expand("output/haplotype/{sample}/{sample}_haplotype_info.txt",sample=sample_df.samplename),
		#clique_agg=expand("output/{sample}_cliquesnvagg.txt",sample=sample_df.samplename),
		agg_csv="output/mutation_table_aggregate.csv",



checkpoint getgenebam:
	input:
		bam=lambda wildcards: sample_df.loc[wildcards.sample,].filename,
		bai=lambda wildcards: "{bam}.bai".format(bam=sample_df.loc[wildcards.sample,].filename)

	output:
		haplotype_info="output/haplotype/{sample}/{sample}_haplotype_info.txt",
	params:
		genelist="assets/2697049_genelist.csv",
		output_dir="output/haplotype/{sample}/"
	shell:
		"python3 scripts/cliquesnvhaplo.py -p {wildcards.sample}  -b {input.bam} -g {params.genelist} -o {params.output_dir} "


rule getgenebam_agg:
	input:
		lambda wildcards: expand("output/haplotype/{{sample}}/{gene}", gene=get_genes(wildcards))

	output:
		"output/{sample}_haplotypes.txt"
	shell:
		"touch {output}"


rule subsample_genebam:
        input:
                bam="output/haplotype/{sample}/{gene}.bam"
        output:
                bam=temporary("output/haplotype/{sample}/{gene}.downsample.bam")

        params: 
                max_depth=1000

        shell: 
                "java -jar tools/sortsamrefname.jar {input.bam} | java -jar tools/biostar154220.jar -n {params.max_depth} | samtools sort - > {output.bam}"



rule cliquesnv:
	input:
		gene_bam="output/haplotype/{sample}/{gene}.downsample.bam"
		#gene_bam=rules.subsample_genebam.output.bam
	output:
		cliquesnv="output/haplotype/{sample}/{gene}.downsample.fasta"
	params:
		clique_coord = lambda wildcards: cliquesnv_coords(genelist_df, wildcards.gene, wildcards.sample),
		outdir = lambda wildcards: "output/haplotype/{sample}/".format(sample=wildcards.sample),
		#cliquesnv_orig=lambda wildcards: "output/haplotype/{sample}/{gene}.downsample.fasta".format(sample=wildcards.sample, gene=wildcards.gene)
	threads: 2
	shell:
		"java -Xmx8G -jar tools/clique-snv.jar {params.clique_coord} -tf 0.01 -m snv-illumina -in {input.gene_bam} -outDir {params.outdir} -threads {threads} > /dev/zero "

rule cliquesnvparse:
	input:
		rules.cliquesnv.output
	output:
		cliquesnv="output/haplotype/{sample}/{gene}.fasta"
	shell:
		"python3 scripts/parsecliquesnv.py -m 12 -i {input} -n {wildcards.sample} -o {output.cliquesnv}"



rule cliquesnv_agg:
	input:
		lambda wildcards: expand("output/haplotype/{{sample}}/{gene}.fasta", sample=wildcards.sample, gene=get_genes(wildcards))
	output:
		"output/{sample}_cliquesnvagg.txt"
	shell:
		"touch {output}"

rule virulign:
	input:
		"output/haplotype/{sample}/{gene}.fasta"

	output:
		"output/virulign/{gene}/{sample}.csv"
	
	threads: 4

	shell:
		"virulign assets/virulign/{wildcards.gene}.xml {input} --exportReferenceSequence yes --exportKind PositionTable --exportAlphabet AminoAcids > {output}"


rule virulign_process:
	input:
		rules.virulign.output
	output:
		mut_table="output/mutation_tables/{sample}_{gene}.csv",
		agg_table="output/agg_aatables/{sample}_{gene}.csv",
		normal_table="output/aatables/{sample}_{gene}.csv"
	shell:
		"python3 scripts/virulignparse.py -i {input} -m {output.mut_table} -a {output.agg_table} -n {output.normal_table}"


rule virulign_agg:
	input:
		samp=lambda wildcards: expand("output/virulign/{gene}/{sample}.csv", sample=wildcards.sample, gene=get_genes(wildcards)),
		genes=lambda wildcards: expand("output/mutation_tables/{sample}_{gene}.csv", sample=wildcards.sample, gene=get_genes(wildcards)) 
	

		

	output:
		vlign=temporary("output/{sample}_virulign.txt"),
		agg_csv="output/{sample}_mutation_table_aggregate.csv"
		
	params:
		agg_csv="output/{sample}_mutation_table_aggregate.csv"
		
	
	shell:
		"touch {output};"
		"python3 scripts/aggregate.py -c {input.genes} -o {output.agg_csv}"

rule muttable_agg:
	input:
		expand("output/{sample}_mutation_table_aggregate.csv", sample=sample_df.samplename)
	output:
		"output/mutation_table_aggregate.csv"
	shell:
		"python scripts/aggregate.py -c {input} -o {output}"



